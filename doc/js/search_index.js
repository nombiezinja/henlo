var search_data = {"index":{"searchIndex":["henlo","authenticable","generators","installgenerator","migrationsgenerator","helpers","util","identifiable","refreshable","revocable","rails","version","copy_initializer()","create_migrations()","generate_henlos()","generate_identifiable()","generate_jti()","generate_refreshable()","it_expired()","it_me?()","it_not_fren?()","it_suspicious?()","jti_match?()","migration_data()","migration_index_data()","parse_resource()","parse_token_type()","setup()","store_jti()","token_blockt()","token_rekt()","code_of_conduct","license","readme","henlo.gemspec"],"longSearchIndex":["henlo","henlo::authenticable","henlo::generators","henlo::generators::installgenerator","henlo::generators::migrationsgenerator","henlo::helpers","henlo::helpers::util","henlo::identifiable","henlo::refreshable","henlo::revocable","rails","rails::version","henlo::generators::installgenerator#copy_initializer()","henlo::generators::migrationsgenerator#create_migrations()","henlo::generate_henlos()","henlo::identifiable::generate_identifiable()","henlo::helpers::util::generate_jti()","henlo::refreshable::generate_refreshable()","henlo::authenticable::it_expired()","henlo::authenticable::it_me?()","henlo::authenticable::it_not_fren?()","henlo::authenticable::it_suspicious?()","henlo::authenticable::jti_match?()","henlo::generators::migrationsgenerator#migration_data()","henlo::generators::migrationsgenerator#migration_index_data()","henlo::authenticable::parse_resource()","henlo::authenticable::parse_token_type()","henlo::setup()","henlo::refreshable::store_jti()","henlo::revocable::token_blockt()","henlo::revocable::token_rekt()","","","",""],"info":[["Henlo","","Henlo.html","","<p>Defines default initializing values and main method for generating tokens\n<p>Helper methods\n"],["Henlo::Authenticable","","Henlo/Authenticable.html","","<p>Module\n"],["Henlo::Generators","","Henlo/Generators.html","",""],["Henlo::Generators::InstallGenerator","","Henlo/Generators/InstallGenerator.html","",""],["Henlo::Generators::MigrationsGenerator","","Henlo/Generators/MigrationsGenerator.html","",""],["Henlo::Helpers","","Henlo/Helpers.html","",""],["Henlo::Helpers::Util","","Henlo/Helpers/Util.html","",""],["Henlo::Identifiable","","Henlo/Identifiable.html","","<p>Generates id token. The id token is used to identify and authenticate the\nuser before  responding to …\n"],["Henlo::Refreshable","","Henlo/Refreshable.html","","<p>Module for generating refresh tokens\n"],["Henlo::Revocable","","Henlo/Revocable.html","","<p>Module allows the blacklist of tokens as identified by the jti (jwt\nidentifier) Blacklisted refresh tokens …\n"],["Rails","","Rails.html","",""],["Rails::VERSION","","Rails/VERSION.html","",""],["copy_initializer","Henlo::Generators::InstallGenerator","Henlo/Generators/InstallGenerator.html#method-i-copy_initializer","()",""],["create_migrations","Henlo::Generators::MigrationsGenerator","Henlo/Generators/MigrationsGenerator.html#method-i-create_migrations","()",""],["generate_henlos","Henlo","Henlo.html#method-c-generate_henlos","(options={})","<p>Generates refresh and access tokens when method is called, allows the\npassing in of  additional key value …\n"],["generate_identifiable","Henlo::Identifiable","Henlo/Identifiable.html#method-c-generate_identifiable","(options={})","<p>Generates id token and returns both the token, with the optional payload\nencoded, and the\n\n<pre>token expiry ...</pre>\n"],["generate_jti","Henlo::Helpers::Util","Henlo/Helpers/Util.html#method-c-generate_jti","()","<p>Generates a random string in the format of\n“a5391f26-1136-46f3-a3d3-ea4e1e558f06” to use as …\n"],["generate_refreshable","Henlo::Refreshable","Henlo/Refreshable.html#method-c-generate_refreshable","(options={})","<p>Generate refreshable token with a unix time for expiry, the type of token \nand the jwt identifier (a …\n"],["it_expired","Henlo::Authenticable","Henlo/Authenticable.html#method-c-it_expired","(reauthenticate_strategy, token, model)","<p>This method is to be called before `it_me?` is called, so that expired\ntokens are treated before the …\n"],["it_me?","Henlo::Authenticable","Henlo/Authenticable.html#method-c-it_me-3F","(token, model)","<p>Authenticates resource by first determining the treatment based on the type\nof token.  Requests with …\n"],["it_not_fren?","Henlo::Authenticable","Henlo/Authenticable.html#method-c-it_not_fren-3F","(resource)","<p>Check the blacklisted tokens table to see whether the token&#39;s jwt\nidentifier has been blacklisted …\n"],["it_suspicious?","Henlo::Authenticable","Henlo/Authenticable.html#method-c-it_suspicious-3F","(resource)","<p>Check the resource to see if it has been flagged for blacklist check\n"],["jti_match?","Henlo::Authenticable","Henlo/Authenticable.html#method-c-jti_match-3F","(payload, resource)","<p>Match the token jwt identifier with what is stored in the database for the\nresource, a lack of match …\n"],["migration_data","Henlo::Generators::MigrationsGenerator","Henlo/Generators/MigrationsGenerator.html#method-i-migration_data","()",""],["migration_index_data","Henlo::Generators::MigrationsGenerator","Henlo/Generators/MigrationsGenerator.html#method-i-migration_index_data","()",""],["parse_resource","Henlo::Authenticable","Henlo/Authenticable.html#method-c-parse_resource","(payload, model)","<p>Parse the resource as identified by the id encoded in the jwt with the key\n“sub”\n"],["parse_token_type","Henlo::Authenticable","Henlo/Authenticable.html#method-c-parse_token_type","(token, options={})","<p>Retrieve the token type from the jwt payload\n"],["setup","Henlo","Henlo.html#method-c-setup","()","<p>Default way to setup Henlo. Run `rails generate henlo:install` to create a\nfresh initializer with all …\n"],["store_jti","Henlo::Refreshable","Henlo/Refreshable.html#method-c-store_jti","(resource, jti)","<p>Store jwt identifier in the app&#39;s database, in the table of the\nresource\n"],["token_blockt","Henlo::Revocable","Henlo/Revocable.html#method-c-token_blockt","(payload, resource)","<p>Method called when the identifier as encoded in the token payload does not\nmatch what was stored in the …\n"],["token_rekt","Henlo::Revocable","Henlo/Revocable.html#method-c-token_rekt","()","<p>Call this period in a scheduled task to clean expired tokens from the\ndatabase\n"],["CODE_OF_CONDUCT","","CODE_OF_CONDUCT_md.html","","<p>Contributor Covenant Code of Conduct\n<p>Our Pledge\n<p>In the interest of fostering an open and welcoming environment, …\n"],["LICENSE","","LICENSE_txt.html","","<p>The MIT License (MIT)\n<p>Copyright © 2018 nombiezinja\n<p>Permission is hereby granted, free of charge, to any …\n"],["README","","README_md.html","","<p>Henlo\n<p>Henlo is an opionated token-based authentication based on the gem Knock.\nHenlo offers an additional …\n"],["henlo.gemspec","","henlo_gemspec.html","","<p>$:.push File.expand_path(“../lib”, __FILE__) require “henlo/version”\n<p>Gem::Specification.new …\n"]]}}